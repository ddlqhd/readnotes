---
layout: post
title:  "[Effective C#] 第1章 C#语言的编程习惯"
date:   2023-04-22 22:09:17 +0800
categories: c#
---
如果你是从其他语言转入C#的，那么需要学习C#语言自己的编程习惯，使得这门语言能够促进你的工作，而不是阻碍你的工作。本章会提醒大家把那些与C#编程风格不符的做法改掉，并培养正确的编程习惯。

# 第1条：优先使用隐式类型的局部变量
隐式类型的局部变量(var)是为了支持匿名类型机制而加入C#语言的。用var来声明变量而不指明其类型，可以**令开发者把注意力更多地集中在名称上面**，从而更好地了解其含义。

**用var来声明的变量不是动态变量**，它的类型会根据赋值符号右侧那个值的类型来确定。var的意义在于，你不用把变量的类型告诉编译器，编译器会替你判断。

在很多情况下，完全可以使用var来声明隐式类型的局部变量，因为编译器会自动选择合适的类型。但是**不能滥用这种方式，因为那样会令代码难于阅读，甚至可能产生微妙的类型转换bug**。

例如：
{% highlight csharp %}
var foo = new MyType(); // good
var result = someObj.DoSomeWork(parameter); // bad
{% endhighlight %}
在someObj.DoSomeWork的例子中，维护人员在阅读代码时无法推断出确定的类型，可能导致维护人员推断的类型与编译器推断的类型不一致，从而在修改代码时引入不必要的bug。

如果隐式类型的局部变量的类型是C#内置的数值类型，那么还会产生另外一些问题，因为在使用这样的数值时，可能会触发各种形式的转换（主要是narrowing conversion的问题，比如Doule转float，此种转换会有精度丢失）。
{% highlight csharp %}
var f = GetMagicNumber();
var total = 100 * f / 6;
{% endhighlight %}
此情况下total的类型由f的类型决定，同时表达式的精度也有f决定，而f又是编译器根据GetMagicNumber()函数的返回值类型推断出来的。因此，**用隐式类型的局部变量来表示数值的时候要多加小心**，因为可能会发生很多隐式转换，这不仅容易令阅读代码的人产生误解，而且其中某些转换还会令精确度下降。